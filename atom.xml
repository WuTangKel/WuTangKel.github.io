<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无糖Kel</title>
  
  
  <link href="https://wutangkel.github.io/atom.xml" rel="self"/>
  
  <link href="https://wutangkel.github.io/"/>
  <updated>2022-08-15T16:41:12.050Z</updated>
  <id>https://wutangkel.github.io/</id>
  
  <author>
    <name>无糖Kel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# 敏感词过滤方案（Trie Tree实现）</title>
    <link href="https://wutangkel.github.io/2022/WordFilter/"/>
    <id>https://wutangkel.github.io/2022/WordFilter/</id>
    <published>2022-08-15T16:28:14.000Z</published>
    <updated>2022-08-15T16:41:12.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Trie-Tree"><a href="#1、Trie-Tree" class="headerlink" title="1、Trie Tree"></a>1、Trie Tree</h1><p>Trie Tree（字典树），一种常见的树形结构，由于其利用字符串的公共前缀极大程度上减少的字符比较，所以非常适合用来实现敏感词过滤方案。</p><p>如，有A，ABC，AC，BCD，BD，CD六个敏感词，则构建Trie Tree结构如下所以。<br><img src="/../img/WordFilter/TrieTree.png" alt="TrieTree示例"></p><h1 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JWordFilter</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Flags</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> FilterWordEnum</span><br><span class="line">    &#123;</span><br><span class="line">        None = <span class="number">0</span>,</span><br><span class="line">        IgnoreCase = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">// 忽略大小写</span></span><br><span class="line">        AllowSkipWord = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 允许跳词</span></span><br><span class="line">        </span><br><span class="line">        All = <span class="built_in">int</span>.MaxValue,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WordFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">WordFilterNode</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 是否是敏感词结尾节点</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">bool</span> IsEnd; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 子节点</span></span><br><span class="line">            <span class="keyword">public</span> Dictionary&lt;<span class="built_in">char</span>, WordFilterNode&gt; Nodes = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">char</span>, WordFilterNode&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 获取子节点</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ch&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> WordFilterNode <span class="title">GetNode</span>(<span class="params"><span class="built_in">char</span> ch</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Nodes.ContainsKey(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> Nodes[ch];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 添加子节点</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ch&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> WordFilterNode <span class="title">AddNode</span>(<span class="params"><span class="built_in">char</span> ch</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> node = <span class="keyword">new</span> WordFilterNode();</span><br><span class="line"></span><br><span class="line">                Nodes.Add(ch, node);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根节点</span></span><br><span class="line">        <span class="keyword">private</span> WordFilterNode _root = <span class="keyword">new</span> WordFilterNode();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳词</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _skipList = <span class="string">&quot; \t\r\n~!@#$%^&amp;*()_+-=【】、[]&#123;&#125;|;&#x27;:\&quot;,./&lt;&gt;?αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ。，、；：？！…—·ˉ¨‘’“”々～‖∶＂＇｀｜〃〔〕〈〉《》「」『』．〖〗【】（）［］｛｝ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩①②③④⑤⑥⑦⑧⑨⑩⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇≈≡≠＝≤≥＜＞≮≯∷±＋－×÷／∫∮∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙≌∽√§№☆★○●◎◇◆□℃‰€■△▲※→←↑↓〓¤°＃＆＠＼︿＿￣―♂♀┌┍┎┐┑┒┓─┄┈├┝┞┟┠┡┢┣│┆┊┬┭┮┯┰┱┲┳┼┽┾┿╀╁╂╃└┕┖┗┘┙┚┛━┅┉┤┥┦┧┨┩┪┫┃┇┋┴┵┶┷┸┹┺┻╋╊╉╈╇╆╅╄丶&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳词数组，方便快速查找</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span>[] _skipArr = <span class="keyword">new</span> <span class="built_in">bool</span>[<span class="built_in">char</span>.MaxValue];</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WordFilter</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _skipList.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> code = (<span class="built_in">int</span>)_skipList[i];</span><br><span class="line">                _skipArr[code] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 添加过滤词</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddWord</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            WordFilterNode node = _root;</span><br><span class="line">            <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> len = <span class="keyword">value</span>.Length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (index &lt; len)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">char</span> ch = <span class="keyword">value</span>[index];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> childNode = node.GetNode(ch);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (childNode == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    childNode = node.AddNode(ch);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (index == len - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    childNode.IsEnd = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                index++;</span><br><span class="line">                node = childNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否存在过滤字符串</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HasFilterWord</span>(<span class="params"><span class="built_in">string</span> word, FilterWordEnum @<span class="built_in">enum</span> = FilterWordEnum.None</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> len = word.Length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> endIndex = GetFilterWordEndIndex(_root, word, i, @enum);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (endIndex != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 替换屏蔽词</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;word&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;enum&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;replace&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReplaceFilterWord</span>(<span class="params"><span class="built_in">string</span> word, FilterWordEnum @<span class="built_in">enum</span> = FilterWordEnum.None, <span class="built_in">char</span> replace = <span class="string">&#x27;*&#x27;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> len = word.Length;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">char</span>[] chars = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len;)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> endIndex = GetFilterWordEndIndex(_root, word, i, @enum);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (endIndex == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (chars == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        chars = word.ToCharArray();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = i; j &lt;= endIndex; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        chars[j] = replace;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    i = endIndex + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (chars == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> word;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">string</span>(chars);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取index索引起始屏蔽词结尾索引</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;node&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;enum&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetFilterWordEndIndex</span>(<span class="params">WordFilterNode node, <span class="built_in">string</span> <span class="keyword">value</span>, <span class="built_in">int</span> index, FilterWordEnum @<span class="built_in">enum</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> endIndex = <span class="number">-1</span>;</span><br><span class="line">            <span class="built_in">int</span> len = <span class="keyword">value</span>.Length;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">bool</span> ignoreCase = (@enum &amp; FilterWordEnum.IgnoreCase) == FilterWordEnum.IgnoreCase;</span><br><span class="line">            <span class="built_in">bool</span> isSkip = (@enum &amp; FilterWordEnum.AllowSkipWord) == FilterWordEnum.AllowSkipWord;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (index &lt; len)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">char</span> ch = <span class="keyword">value</span>[index];</span><br><span class="line">                </span><br><span class="line">                WordFilterNode childNode = <span class="literal">null</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 忽略大小写</span></span><br><span class="line">                <span class="keyword">if</span> (ignoreCase)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 先获取一次，childNode为null再转换</span></span><br><span class="line">                    childNode = node.GetNode(ch);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// childNode为null 且 是字母</span></span><br><span class="line">                    <span class="keyword">if</span> (childNode == <span class="literal">null</span> &amp;&amp; <span class="built_in">char</span>.IsLetter(ch))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 小写 转 大写</span></span><br><span class="line">                        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ch = (<span class="built_in">char</span>)(ch &amp; <span class="number">191U</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 大写 转 小写</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            ch = (<span class="built_in">char</span>) (ch | <span class="number">32U</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        childNode = node.GetNode(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    childNode = node.GetNode(ch);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 没有子节点</span></span><br><span class="line">                <span class="keyword">if</span> (childNode == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 不允许跳词 或 不是跳词范围字符 直接返回</span></span><br><span class="line">                    <span class="keyword">if</span> (!isSkip || !_skipArr[ch])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> endIndex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 有子节点</span></span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 最后一个节点</span></span><br><span class="line">                    <span class="keyword">if</span>(childNode.IsEnd)</span><br><span class="line">                    &#123;</span><br><span class="line">                        endIndex = index;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    node = childNode;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 索引+1 继续向下检测</span></span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> endIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WordFilter filter = <span class="keyword">new</span> WordFilter();</span><br><span class="line">filter.AddWord(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(filter.ReplaceFilterWord(<span class="string">&quot;asDf&quot;</span>));</span><br><span class="line">Console.WriteLine(filter.ReplaceFilterWord(<span class="string">&quot;asDf&quot;</span>, FilterWordEnum.All));</span><br><span class="line">Console.WriteLine(filter.ReplaceFilterWord(<span class="string">&quot;as Df&quot;</span>, FilterWordEnum.All));</span><br></pre></td></tr></table></figure><p><img src="/../img/WordFilter/Output.png" alt="输出"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、Trie-Tree&quot;&gt;&lt;a href=&quot;#1、Trie-Tree&quot; class=&quot;headerlink&quot; title=&quot;1、Trie Tree&quot;&gt;&lt;/a&gt;1、Trie Tree&lt;/h1&gt;&lt;p&gt;Trie Tree（字典树），一种常见的树形结构，由于其利用字符串的</summary>
      
    
    
    
    
    <category term="C#" scheme="https://wutangkel.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Win10 Tim个人数据设置自定义路径失败</title>
    <link href="https://wutangkel.github.io/2022/TimSetCustomPathFail/"/>
    <id>https://wutangkel.github.io/2022/TimSetCustomPathFail/</id>
    <published>2022-08-02T15:52:41.000Z</published>
    <updated>2022-08-02T16:38:50.172Z</updated>
    
    <content type="html"><![CDATA[<p>由于C盘容量不足，查了一下占用资源，发现Tim个人数据占了10+G，本来只是迁移一下存储路径就行了，但是发现修改之后Tim提示:<code>保存路径无效，你没有权限在此写入数据，请重新选择</code>,特此记录一下解决办法。<br><img src="/../img/TimSetCustomPathFail/%E4%BF%9D%E5%AD%98%E5%A4%B1%E8%B4%A5.png" alt="设置个人数据路径失败"></p><p>首先先退出Tim，然后把默认路径<code>C:\Users\用户名\Documents\Tencent Files</code>下的数据手动拷贝到想要迁移的路径。<br><img src="/../img/TimSetCustomPathFail/%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84.png" alt="默认路径"></p><p>再后打开<code>C:\Users\Public\Documents\Tencent\QQ\UserDataInfo.ini</code>Tim配置，把<code>UserDataSavePathType</code>值改为2，<code>UserDataSavePath</code>值设置为迁移路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[UserDataSet]</span><br><span class="line">UserDataSavePathType=2</span><br><span class="line">UserDataSavePath=D:\Software\Tim\TencentFiles</span><br></pre></td></tr></table></figure><p>至此，就完成了所有配置，重新打开Tim设置就可以看到个人数据的保存路径已经修改成功了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于C盘容量不足，查了一下占用资源，发现Tim个人数据占了10+G，本来只是迁移一下存储路径就行了，但是发现修改之后Tim提示:&lt;code&gt;保存路径无效，你没有权限在此写入数据，请重新选择&lt;/code&gt;,特此记录一下解决办法。&lt;br&gt;&lt;img src=&quot;/../img/Ti</summary>
      
    
    
    
    
  </entry>
  
</feed>
